<?xml version="1.0" encoding="UTF-8"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="section_swift-partitioning">
    <title>Partitioning and File System Considerations</title>
    <para>
        After volumes are created and mapped to Swift nodes, they need to be partitioned and have a file system created on them. For each LUN that was created on the E-Series storage array create a single, new primary partition that utilizes the entire capacity available on the LUN.
    </para>
    <para>
        NetApp recommends the use of <command>dm-multipath</command> to provide support for redundant paths between an object storage node and the E-Series storage controller. For details on how to configure <command>dm-multipath</command>, refer to the NetApp E-Series Storage Systems Failover Drivers Guide, located at <link xlink:href="https://library.netapp.com/ecm/ecm_get_file/ECMP1394845"/>.
    </para>
    <simplesect>
        <title>Partitioning with Multipath</title>
        <para>
            Assuming that three volumes were created from the disk pool, and if multipath is enabled, you should see a total of 6 mapped devices, as in the following example:
            <programlisting>
rroot@stlrx300s7-102:~# ls -l /dev/mapper
total 0
lrwxrwxrwx 1 root root       7 May  5 15:20 360080e50003220a80000017353450e3f -> ../dm-0
lrwxrwxrwx 1 root root       7 May  5 15:20 360080e50003222300000019153450e18 -> ../dm-1
lrwxrwxrwx 1 root root       7 May  5 15:20 360080e50003222300000019053450e18 -> ../dm-2
crw------- 1 root root 10, 236 May  5 15:20 control
            </programlisting>
            Now we will use the <command>parted</command> command to partition the mapped devices:
            <programlisting><?db-font-size 70%?>
root@stlrx300s7-102:/dev/mapper# luns=`ls|grep -v control`
root@stlrx300s7-102:/dev/mapper# for i in $luns
> do
> parted -a optimal -s --  /dev/mapper/$i mklabel gpt mkpart primary xfs 0% 100%
> done
root@stlrx300s7-102:/dev/mapper# ls -l /dev/dm-
dm-0  dm-1  dm-2  dm-3  dm-4  dm-5  dm-6  dm-7  dm-8
root@stlrx300s7-102:/dev/mapper# ls -l /dev/mapper
total 0
lrwxrwxrwx 1 root root       7 May  5 15:29 360080e50003220a80000017353450e3f -> ../dm-0
lrwxrwxrwx 1 root root       7 May  5 15:29 360080e50003220a80000017353450e3f1 -> ../dm-3
lrwxrwxrwx 1 root root       7 May  5 15:29 <emphasis>360080e50003220a80000017353450e3f-part1</emphasis> -> ../dm-4
lrwxrwxrwx 1 root root       7 May  5 15:29 360080e50003222300000019053450e18 -> ../dm-2
lrwxrwxrwx 1 root root       7 May  5 15:29 360080e50003222300000019053450e18p1 -> ../dm-5
lrwxrwxrwx 1 root root       7 May  5 15:29 <emphasis>360080e50003222300000019053450e18-part1</emphasis> -> ../dm-6
lrwxrwxrwx 1 root root       7 May  5 15:29 360080e50003222300000019153450e18 -> ../dm-1
lrwxrwxrwx 1 root root       7 May  5 15:29 360080e50003222300000019153450e18p1 -> ../dm-7
lrwxrwxrwx 1 root root       7 May  5 15:29 <emphasis>360080e50003222300000019153450e18-part1</emphasis> -> ../dm-8
crw------- 1 root root 10, 236 May  5 15:20 control
            </programlisting>
        </para>
    </simplesect>
    <para>
        Swift currently requires that the underlying filesystem have support for extended attributes of the file system. While this requirement may be removed in a future release of Swift, as of the Havana release XFS is currently the recommended filesystem.
    </para>
    <para>
        Internal volumes created in a DDP layout resemble a traditional RAID 6 volume with the following parameters:
    <itemizedlist>
        <listitem>Configuration: 8+2 RAID 6</listitem>
        <listitem>Segment Size:  128K</listitem>
        <listitem>Stripe Width:  1MB <inlineequation><mathphrase>(total number of data drives * segment size = 128K * 8)</mathphrase></inlineequation></listitem>
    </itemizedlist>
        These parameters can be leveraged to configure the file system for optimal performance with the LUN. When a file system is created on a logical volume device, <command>mkfs.xfs</command> will automatically query the logical volume to determine appropriate stripe unit and stripe width values, unless values are passed at the time of filesystem creation; for example:
    <programlisting>
# ls -l /dev/mapper/|grep part|awk '{print $9}'
360080e50003220a80000017353450e3f-part1
360080e50003222300000019053450e18-part1
360080e50003222300000019153450e18-part1
# parts=`ls -l /dev/mapper/|grep part|awk '{print $9}'`
# for i in $parts
> do
> <emphasis>mkfs.xfs -d su=131072,sw=8 -i size=1024 $i</emphasis>
> done
    </programlisting>
    <tip>
        <para>
            You can verify that the partition was successfully created and is properly aligned by using the <command>parted</command> command:
        <programlisting>
# parted /dev/mapper/360a9800043346852563444717a513571 align-check optimal 1
1 aligned
        </programlisting>
        </para>
    </tip>
        You can verify that the underlying filesystem has the correct values for stripe unit and stripe width by using the <command>xfs_info</command> command:
        <programlisting><?db-font-size 75%?>
mount -t xfs -o nobarrier,noatime,nodiratime,inode64 /dev/mapper/360080e50003220a80000017353450e3f-part1 /disk1
# xfs_info /disk1
meta-data=/dev/mapper/360080e50003220a80000017353450e3f-part1 isize=1024   agcount=4, agsize=83623808 blks
         =                       sectsz=512   attr=2
data     =                       bsize=4096   blocks=334495232, imaxpct=5
         =                       sunit=32     swidth=256 blks
naming   =version 2              bsize=4096   ascii-ci=0
log      =internal               bsize=4096   blocks=163328, version=2
         =                       sectsz=512   sunit=32 blks, lazy-count=1
realtime =none                   extsz=4096   blocks=0, rtextents=0
    </programlisting>
        <literal>sunit</literal> and <literal>swidth</literal> are shown in <literal>bsize</literal> (block size) units in the <command>xfs_info</command> command output.
    <programlisting>
stripe unit= 32 sunits * 4096 bsize (block size)= 131072 bytes = 128K
stripe width= 256 blocks * 4096 bsize = 1M = 128K * 8 drives
    </programlisting>
        The sysctl <literal>fs.xfs.rotorstep</literal> can be used to change how many files are put into an XFS allocation group. Increasing the default number from 1 to 255 reduces seeks to multiple allocation groups. NetApp has observed improved performance in some cases by increasing this number. You can put the following line in <filename>/etc/sysctl.conf</filename> to ensure this change is affected on each boot of the system:
    <programlisting>
fs.xfs.rotorstep = 255
    </programlisting>
        When mounting the XFS filesystem that resides on the LUNs offered from the E-Series storage, be sure to use the following mount options:
    <programlisting>
mount –t xfs –o “nobarrier,noatime,nodiratime,inode64” \
/dev/mapper/nodeX /srv/node/sdb1
    </programlisting>
        <warning>
            <para>
                The mount points for the account, container, and object storage will not be managed by Swift; therefore, you must use the standard Linux mechanisms (e.g. <filename>/etc/fstab</filename>) to ensure that the mount points exist and are mounted before Swift starts.
            </para>
        </warning>
    </para>
</section>
