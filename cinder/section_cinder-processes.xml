<?xml version="1.0" encoding="UTF-8"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="section_cinder-processes">
    <title>Process Structure</title>
    <para>
        There are four processes that make up the Cinder service:
    </para>
    <itemizedlist>
        <listitem><literal>cinder-api</literal> is an WSGI application that accepts and validates REST (JSON or XML) requests from clients and routes them to other Cinder processes as appropriate over AMQP.</listitem>
        <listitem><literal>cinder-scheduler</literal> determines which backend should serve as the destination for a volume creation or movement request. It maintains non-persistent state for backends (e.g. available capacity, capabilities, and supported extra specs) that can be leveraged when making placement decisions. The algorithm utilized by the scheduler can be changed through Cinder configuration.</listitem>
        <listitem><literal>cinder-volume</literal> accepts requests from other Cinder processes and serves as the operational container for Cinder drivers. This process is multi-threaded, and will typically have one thread of execution per Cinder backend as defined in the Cinder configuration file.</listitem>
        <listitem><literal>cinder-backup</literal> handles the interaction with potential backup targets (e.g. OpenStack Object Storage Service (Swift)) when a client requests a volume backup to be created or managed.</listitem>
    </itemizedlist>
    <figure xml:id="cinder.process_overview">
        <title>Cinder Processes Concept Diagram</title>
        <mediaobject>
            <imageobject>
                <imagedata fileref="../images/cinder_process_layout.png" align="center" scale="70"/>
            </imageobject>
            <textobject>
                <phrase>An logical diagram of the component processes comprising Cinder</phrase>
            </textobject>
        </mediaobject>
    </figure>
    <simplesect>
        <title>Volume Creation Workflow</title>
        <para>
            The following section will walk through the steps that occur when a user requests the creation of a new volume from Cinder.
            <!--        Walk through steps of workflow including annotated diagram representing control and data paths -->
        </para>
        <figure xml:id="cinder.create_volume_workflow">
            <title>Cinder Workflow - Volume Creation</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="../images/cinder_create_volume_process.png" align="center" scale="80"/>
                </imageobject>
                <textobject>
                    <phrase>An logical diagram of the volume creation workflow within Cinder</phrase>
                </textobject>
            </mediaobject>
        </figure>
        <orderedlist>
            <listitem>
                Client issues request to create volume through invoking REST API (may use <literal>python-cinderclient</literal> CLI utility).
            </listitem>
            <listitem>
                <literal>cinder-api</literal> process validates request, user credentials; once validated, puts message onto AMQP queue for processing.
            </listitem>
            <listitem>
                <literal>cinder-volume</literal> process takes message off of queue, sends message to cinder-scheduler to determine which backend to provision volume into.
            </listitem>
            <listitem>
                <literal>cinder-scheduler</literal> process takes message off of queue, generates candidate list based on current state and requested volume criteria (size, availability zone, volume type (including extra specs)).
            </listitem>
            <listitem>
                <literal>cinder-volume</literal> process reads response message from <literal>cinder-scheduler</literal> from queue; iterates through candidate list by invoking backend driver methods until successful.
            </listitem>
            <listitem>
                NetApp Cinder driver creates requested volume through interactions with storage subsystem (dependent on configuration and protocol).
            </listitem>
            <listitem>
                <literal>cinder-volume</literal> process collects volume metadata and connection information and posts response message to AMQP queue.
            </listitem>
            <listitem>
                <literal>cinder-api</literal> process reads response message from queue and responds to client.
            </listitem>
            <listitem>
                Client receives information including status of creation request, volume UUID, etc.
            </listitem>
        </orderedlist>
    </simplesect>
    <simplesect>
        <title>Volume Attach Workflow</title>
        <para>
            The following section will walk through the steps that occur when a user requests that a Cinder volume be attached to a Nova compute instance.
        </para>
        <figure xml:id="cinder.volume_attach_workflow">
            <title>Cinder &amp; Nova Workflow - Volume Attach</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="../images/nova_volume_attach_process.png" align="center" scale="70"/>
                </imageobject>
                <textobject>
                    <phrase>An logical diagram of the volume attach workflow between Nova &amp; Cinder</phrase>
                </textobject>
            </mediaobject>
        </figure>
        <orderedlist>
            <listitem>
                Client issues request to attach volume through invoking Nova REST API (may use <literal>python-novaclient</literal> CLI utility).
            </listitem>
            <listitem>
                <literal>nova-api</literal> process validates request, user credentials; once validated, invokes Cinder API to get connection information for specified volume.
            </listitem>
            <listitem>
                <literal>cinder-api</literal> process validates request, user credentials; once validated, posts message to volume manager over AMQP.
            </listitem>
            <listitem>
                <literal>cinder-volume</literal> reads message from queue, invokes Cinder driver corresponding to volume to be attached.
            </listitem>
            <listitem>
                NetApp Cinder driver prepares Cinder volume in preparation for attachment (specific steps dependent on storage protocol used).
            </listitem>
            <listitem>
                <literal>cinder-volume</literal> process posts response information to <literal>cinder-api</literal> process via AMQP queue.
            </listitem>
            <listitem>
                <literal>cinder-api</literal> process reads response message from <literal>cinder-volume</literal> from queue; passes connection information in RESTful response to Nova caller.
            </listitem>
            <listitem>
                Nova creates the connection to the storage using the returned information from Cinder.
            </listitem>
            <listitem>
                Nova passes the volume device/file to the hypervisor.
            </listitem>
            <listitem>
                The hypervisor attaches the volume device/file to the guest VM as an actual or virtualized block device (dependent on storage procotol).
            </listitem>
        </orderedlist>
    </simplesect>
</section>
